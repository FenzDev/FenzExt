<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
		<ReferencingProjectRoot>$(MSBuildProjectDirectory)</ReferencingProjectRoot>
    </PropertyGroup>

	<ItemGroup>
		<AvailableItemName Include="AssetsConfigFile" />
	</ItemGroup>
	
	<PropertyGroup>
		<IsThereLocalAssets Condition="$(AssetsSourcePath) != ''">True</IsThereLocalAssets>
		<IsThereLocalAssets Condition="$(AssetsSourcePath) == ''">False</IsThereLocalAssets>
		<IsUsingSourceBuildingTool Condition="$(AssetsSourcePath) == ''">False</IsUsingSourceBuildingTool>
		<AssetsSourceFullPath Condition="$(IsThereLocalAssets)">$(ReferencingProjectRoot)/$(AssetsSourcePath)/</AssetsSourceFullPath>
	</PropertyGroup>
	
	<PropertyGroup>
		<DefaultAssetsConfigTargetPath>$(ReferencingProjectRoot)/AssetsConfig.json</DefaultAssetsConfigTargetPath>
		<AssetsConfigTemplatePath>$(MSBuildThisFileDirectory)AssetsConfig.json</AssetsConfigTemplatePath>	
		<BuildingToolDir>$(MSBuildThisFileDirectory)/Tools/</BuildingToolDir>
		<BuildingToolBySourceDir>$(MSBuildThisFileDirectory)Fenzwork.BuildingTools/bin/$(Configuration)/net8.0</BuildingToolBySourceDir>
		<BuildingToolBySourcePath>$(BuildingToolBySourceDir)/fwbuild.dll</BuildingToolBySourcePath>
		<BuildingToolCommand>fwbuild</BuildingToolCommand>
		<MGCBAutoGeneratedFilePath>$(AssetsSourceFullPath).mgcref.cache</MGCBAutoGeneratedFilePath>
		<AssetsCatalogFile>$(AssetsSourceFullPath)obj/.global/assets_catalog.cache</AssetsCatalogFile>

		<DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>
	</PropertyGroup>

	<Target Name="CheckConfigExistence" BeforeTargets="GenerateItems"
			Condition="'@(AssetsConfigFile)' == '' and $(IsThereLocalAssets)">
		
		<Copy
			SourceFiles="$(AssetsConfigTemplatePath)"
			DestinationFiles="$(DefaultAssetsConfigTargetPath)" />
		<CallTarget Targets="GenerateAssetsInfo" />
    </Target>

	<ItemGroup>
		<AssetsConfigFile	Condition="'@(AssetsConfigFile)' == ''  and $(IsThereLocalAssets) and Exists('$(DefaultAssetsConfigTargetPath)')"
							Include="$(DefaultAssetsConfigTargetPath)"/>
    </ItemGroup>


	<Target Name="ErrorOnMultipleConfigs" Condition=" $([System.Int32]::Parse('@(AssetsConfigFile->Count())')) > 1 " >
		<Error Text="Can't have multiple AssetsConfig files!'"/>
    </Target>

	<Target Name="GenerateItems" BeforeTargets="RunBuildingTool">
		<ItemGroup>
			<LocalAssetsDir Include="$(AssetsSourceFullPath)" />
			<LocalMGCBFile Include="$(MGCBAutoGeneratedFilePath)"/>
		</ItemGroup>
    </Target>
	
	<Target Name="RunBuildingTool" Condition="$(IsThereLocalAssets)">
		<Exec 
			Condition="$(IsUsingSourceBuildingTool)"
			WorkingDirectory="$(ReferencingProjectRoot)"
			Command="dotnet &quot;$(BuildingToolBySourcePath)&quot; &quot;@(AssetsConfigFile->'%(Identity)')&quot; &quot;$(AssetsSourcePath)&quot; &quot;@(LocalAssetsDir->'%(Identity)')&quot; &quot;@(LocalMGCBFile->'%(Identity)')&quot;" />
		<Exec 
			Condition="!$(IsUsingSourceBuildingTool)"
			WorkingDirectory="$(ReferencingProjectRoot)"
			Command="&quot;$(BuildingToolCommand)&quot; &quot;@(AssetsConfigFile->'%(Identity)')&quot; &quot;$(AssetsSourcePath)&quot; &quot;@(LocalAssetsDir->'%(Identity)')&quot; &quot;@(LocalMGCBFile->'%(Identity)')&quot;" />
		
	</Target>

	<Target Name="RunBuildingToolWithPlatform" Condition="'$(MonoGamePlatform)'!=''" BeforeTargets="CollectContentReferences">
		<CallTarget Condition="Exists($(AssetsSourceFullPath))" Targets="RunBuildingTool"/>
    </Target>

	<Target Name="RunBuildingToolNoPlatform" Condition="'$(MonoGamePlatform)'==''" BeforeTargets="BeforeBuild">
		<CallTarget Condition="Exists($(AssetsSourceFullPath))" Targets="RunBuildingTool"/>
    </Target>

	<Target Name="IncludeAutoGeneratedMGCB" AfterTargets="RunBuildingTool">
		<ItemGroup>
			<MonoGameContentReference Include="@(FinalMGCBFile)"/>
        </ItemGroup>
    </Target>

	<Target Name="CleanAutoGeneratedMGCBRebuild" BeforeTargets="BeforeRebuild">
		<CallTarget Targets="CleanAutoGeneratedMGCB"/>
    </Target>
	<Target Name="CleanAutoGeneratedMGCBClean" BeforeTargets="Clean">
		<CallTarget Targets="CleanAutoGeneratedMGCB"/>
    </Target>

	<Target Name="CleanAutoGeneratedMGCB">
		<Delete Files="$(MGCBAutoGeneratedFilePath)"
				TreatErrorsAsWarnings="True"/>
		<Delete Files="$(AssetsSourceFullPath)bin/**"
				TreatErrorsAsWarnings="True"/>
    </Target>

	<Target Name="CollectOtherProjectsContent" BeforeTargets="CollectContentReferences" Condition="'$(MonoGamePlatform)'!=''">
	  <!-- Create items from ProjectReference paths -->
	  <ItemGroup>
		<!-- Add metadata to project references if not already present -->
		<_ReferencedProjectDir Include="@(ProjectReference)">
		  <ProjectDir>$([System.IO.Path]::GetDirectoryName('%(Identity)'))</ProjectDir>
		</_ReferencedProjectDir>
	  </ItemGroup>

	  <ItemGroup>
		<!-- Use globbing to find .cache.mgcref in each reference -->
		<MonoGameContentReference Include="%( _ReferencedProjectDir.ProjectDir )\**\.mgcref.cache" />
	  </ItemGroup>
	</Target>

	<Target Name="ForceGenerateAssetsInfo" AfterTargets="RunBuildingTool">
		<MSBuild 
		  Projects="$(MSBuildProjectFullPath)" 
		  Targets="GenerateAssetsInfo" 
		  Properties="SomeProperty=ForceRun$(MSBuildStartupDirectory)" />
    </Target>

	<Target Name="RoutineGenerateAssetsInfo" Condition="@(AssetsConfigFile->Count()) > 0" BeforeTargets="CoreCompile">
		<CallTarget Targets="GenerateAssetsInfo"/>
    </Target>

<UsingTask
  TaskName="GenerateAssetsInfoTask"
  TaskFactory="CodeTaskFactory"
  AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
  <ParameterGroup>
    <AssetsCatalogFile	ParameterType="System.String" Required="true" />
    <AssetsConfigFile	ParameterType="System.String" Required="true" />
    <AssetsWorkingDir	ParameterType="System.String" Required="true" />
    <ProjectNamespace	ParameterType="System.String" Required="true" />
    <IsOnDebug			ParameterType="System.Boolean" Required="true" />
    <OutputFile			ParameterType="System.String" Required="true" />
  </ParameterGroup>
  <Task>
    <Reference Include="System.Core" />
    <Using Namespace="System" />
    <Using Namespace="System.IO" />
    <Using Namespace="System.Text" />
    <Using Namespace="System.Linq" />
    <Using Namespace="System.Collections.Generic" />
    <Code Language="cs" Type="Fragment"><![CDATA[

// 2. Parse assets catalog
//{Method}:{Type}:{AssetPath}:{AssetName}:{Domain}:{Parameter}
var assetEntries = File.ReadAllLines(AssetsCatalogFile)
    .Where(line => !string.IsNullOrWhiteSpace(line))
    .Select(line => line.Split(':'))
    .Select(parts => new {
        FullInfo = string.Join(":",parts),
        AssetType = parts[1].Trim(),
        AssetName = parts[4].Trim(),
        Domain = parts[5].Trim()
    })
    .ToList();

if (assetEntries.Count == 0)
    return true;

// 3. Sort entries
assetEntries = assetEntries
    .OrderBy(entry => entry.Domain)
    .ThenBy(entry => entry.AssetName)
    .ToList();

// 4. Ensure output directory exists
var outputDirectory = Path.GetDirectoryName(OutputFile);
if (!Directory.Exists(outputDirectory))
    Directory.CreateDirectory(outputDirectory);

// 5. Write generated file
using (var writer = new StreamWriter(OutputFile, false, Encoding.UTF8))
{
    // --- Module initializer ---
    writer.WriteLine("namespace Fenzwork._AutoGen." + ProjectNamespace);
    writer.WriteLine("{");
    writer.WriteLine("\tstatic class SetAssetsInfo");
    writer.WriteLine("\t{");
    writer.WriteLine("#pragma warning disable");
    writer.WriteLine("\t\t[System.Runtime.CompilerServices.ModuleInitializer]");
    writer.WriteLine("\t\tpublic static void Init()");
    writer.WriteLine("\t\t{");

    if (IsOnDebug)
    {
        writer.WriteLine("\t\t\tFenzwork.Services.AutoGenHelper.AddDebugAssetsInfo(\""
            + AssetsConfigFile + "\", \"" + AssetsWorkingDir + "\");");
        writer.WriteLine();
    }

    foreach (var entry in assetEntries)
    {
        var filename = Path.GetFileName(entry.AssetName);
        writer.WriteLine("\t\t\tFenzwork.Services.AutoGenHelper.RegisterAsset(\""
            + entry.FullInfo.Replace("\\", "\\\\") + "\");");
    }

    writer.WriteLine("\t\t}");
    writer.WriteLine("#pragma warning restore");
    writer.WriteLine("\t}");
    writer.WriteLine("}");

    // --- Assets class ---
    writer.WriteLine("namespace " + ProjectNamespace);
    writer.WriteLine("{");
    writer.WriteLine("\tpublic static class Assets");
    writer.WriteLine("\t{");

    string lastDomain = null;
    var lastPathSegments = new List<string>();

    foreach (var entry in assetEntries)
    {
        var pathParts = entry.AssetName.Split('.');
        var fieldName = pathParts.Last();
        var classSegments = pathParts.Take(pathParts.Length - 1).ToList();

        // If domain changed, close previous one and start new
        if (entry.Domain != lastDomain)
        {
            for (int i = lastPathSegments.Count - 1; i >= 0; i--)
                writer.WriteLine(new string('\t', i + 3) + "}");

            if (!string.IsNullOrEmpty(lastDomain))
                writer.WriteLine("\t\t}");

            if (!string.IsNullOrEmpty(entry.Domain))
            {
                writer.WriteLine("\t\tpublic static class " + entry.Domain);
                writer.WriteLine("\t\t{");
            }

            lastPathSegments.Clear();
            lastDomain = entry.Domain;
        }

        // Find shared prefix between old and current path segments
        int sharedCount = 0;
        while (sharedCount < classSegments.Count &&
               sharedCount < lastPathSegments.Count &&
               classSegments[sharedCount] == lastPathSegments[sharedCount])
        {
            sharedCount++;
        }

        // Close excess levels
        for (int i = lastPathSegments.Count - 1; i >= sharedCount; i--)
            writer.WriteLine(new string('\t', i + 3) + "}");

        // Open new nested levels
        for (int i = sharedCount; i < classSegments.Count; i++)
        {
            var nestedClass = classSegments[i];
            writer.WriteLine(new string('\t', i + 3) + "public static class " + nestedClass);
            writer.WriteLine(new string('\t', i + 3) + "{");
        }

        // Declare asset field
        string indent = new string('\t', classSegments.Count + 3);
        writer.WriteLine(indent + "/// <summary>");
        writer.WriteLine(indent + "/// Assetname='" + entry.AssetName + ":"+ entry.Domain + "'");
        writer.WriteLine(indent + "/// <para>You might not want to use it directly inside Game Loops. Put it into field/property instead at loading time</para>");
        writer.WriteLine(indent + "/// </summary>");
        writer.WriteLine(indent + "public static Fenzwork.Systems.Assets.AssetHandle<"
            + entry.AssetType + "> " + fieldName + " => Fenzwork.AssetsManager.Get<"+ entry.AssetType + ">(\"" + entry.AssetName + "\", \"" + entry.Domain + "\");");


        lastPathSegments = classSegments;
    }

    // Close remaining open blocks
    if (!string.IsNullOrEmpty(lastDomain))
    {
        for (int i = lastPathSegments.Count - 1; i >= 0; i--)
            writer.WriteLine(new string('\t', i + 3) + "}");
        writer.WriteLine("\t\t}");
    }

    writer.WriteLine("\t}");
    writer.WriteLine("}");
}

return true;


    ]]></Code>
  </Task>
</UsingTask>




<Target Name="GenerateAssetsInfo">
	<PropertyGroup>
			
			<AutoGenAssetsInfoFileName>Fenzwork._AutoGen.AssetsInfo.cs</AutoGenAssetsInfoFileName>
			
			<AssetsInfoWorkingDir Condition="'$(Configuration)'=='Debug' and $(IsThereLocalAssets)">$([MSBuild]::NormalizeDirectory($(AssetsSourceFullPath)).Replace("\", "/"))</AssetsInfoWorkingDir>
			<AssetsInfoWorkingDir Condition="'$(Configuration)'!='Debug' or !$(IsThereLocalAssets)"></AssetsInfoWorkingDir>
			
			<AssetsInfoConfigFileTmp>@(AssetsConfigFile)</AssetsInfoConfigFileTmp>
			<AssetsInfoConfigFile Condition="'$(Configuration)'=='Debug' and $(IsThereLocalAssets)">$([System.String]::Copy($(AssetsInfoConfigFileTmp)).Replace("\", "/"))</AssetsInfoConfigFile>
			<AssetsInfoConfigFile Condition="'$(Configuration)'!='Debug' or !$(IsThereLocalAssets)"></AssetsInfoConfigFile>
			
			<AssetsInfoCatalogContent Condition="Exists('$(AssetsCatalogFile)')">@(AssetPaths->'%(Identity)', ':')</AssetsInfoCatalogContent>

			<IsOnDebug Condition="'$(Configuration)'=='Debug'">true</IsOnDebug>
			<IsOnDebug Condition="'$(Configuration)'!='Debug'">false</IsOnDebug>
	</PropertyGroup>

  <GenerateAssetsInfoTask
     ProjectNamespace  ="$(MSBuildProjectName)"
     AssetsCatalogFile ="$(AssetsCatalogFile)"
     AssetsConfigFile  ="$(AssetsInfoConfigFile)"
     AssetsWorkingDir  ="$(AssetsInfoWorkingDir)"
	 IsOnDebug         ="$(IsOnDebug)"
     OutputFile        ="$(IntermediateOutputPath)$(AutoGenAssetsInfoFileName)" />
  <ItemGroup>
    <Compile Include="$(IntermediateOutputPath)$(AutoGenAssetsInfoFileName)" AutoGen="true" />
  </ItemGroup>
</Target>
	
	<Target Name="DeleteAssetsInfoClean"  BeforeTargets="Clean">
		<Delete Files="$(AutoGenAssetsInfoPath)" ContinueOnError="true"/>
    </Target>

	<Target Name="EnsureBuildingToolExists"  Condition="!$(IsUsingSourceBuildingTool) and ( !Exists('$(BuildingToolDir)$(BuildingToolCommand)') or !Exists('$(BuildingToolDir)$(BuildingToolCommand).exe') )" BeforeTargets="Restore">
	    <MakeDir Directories="$(BuildingToolDir)"/>
	    <Exec Command="&quot;dotnet&quot; tool install fwbuild --tool-path ." WorkingDirectory="$(BuildingToolDir)" ContinueOnError="true" />
    </Target>


	<Import Project="Core.targets"/>

</Project>

