<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
		<ReferencingProjectRoot>$(MSBuildProjectDirectory)</ReferencingProjectRoot>
    </PropertyGroup>

	<ItemGroup>
		<AvailableItemName Include="AssetsConfigFile" />
	</ItemGroup>
	
	<PropertyGroup>
		<IsThereLocalAssets Condition="$(AssetsSourcePath) != ''">True</IsThereLocalAssets>
		<IsThereLocalAssets Condition="$(AssetsSourcePath) == ''">False</IsThereLocalAssets>
		<IsUsingSourceBuildingTool Condition="$(AssetsSourcePath) == ''">False</IsUsingSourceBuildingTool>
		<AssetsSourceFullPath Condition="$(IsThereLocalAssets)">$(ReferencingProjectRoot)/$(AssetsSourcePath)/</AssetsSourceFullPath>
	</PropertyGroup>
	
	<PropertyGroup>
		<DefaultAssetsConfigTargetPath>$(ReferencingProjectRoot)/AssetsConfig.json</DefaultAssetsConfigTargetPath>
		<AssetsConfigTemplatePath>$(MSBuildThisFileDirectory)AssetsConfig.json</AssetsConfigTemplatePath>	
		<BuildingToolDir>$(MSBuildThisFileDirectory)/Tools/</BuildingToolDir>
		<BuildingToolBySourceDir>$(MSBuildThisFileDirectory)Fenzwork.BuildingTools/bin/$(Configuration)/net8.0</BuildingToolBySourceDir>
		<BuildingToolBySourcePath>$(BuildingToolBySourceDir)/fwbuild.dll</BuildingToolBySourcePath>
		<BuildingToolCommand>fwbuild</BuildingToolCommand>
		<MGCBAutoGeneratedFilePath>$(AssetsSourceFullPath).mgcref.cache</MGCBAutoGeneratedFilePath>
		<AssetsCatalogFile>$(AssetsSourceFullPath)obj/.global/assets_catalog.cache</AssetsCatalogFile>

		<DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>
	</PropertyGroup>

	<Target Name="CheckConfigExistence" BeforeTargets="GenerateItems"
			Condition="'@(AssetsConfigFile)' == '' and $(IsThereLocalAssets)">
		
		<Copy
			SourceFiles="$(AssetsConfigTemplatePath)"
			DestinationFiles="$(DefaultAssetsConfigTargetPath)" />
		<CallTarget Targets="GenerateAssetsInfo" />
    </Target>

	<ItemGroup>
		<AssetsConfigFile	Condition="'@(AssetsConfigFile)' == ''  and $(IsThereLocalAssets) and Exists('$(DefaultAssetsConfigTargetPath)')"
							Include="$(DefaultAssetsConfigTargetPath)"/>
    </ItemGroup>


	<Target Name="ErrorOnMultipleConfigs" Condition=" $([System.Int32]::Parse('@(AssetsConfigFile->Count())')) > 1 " >
		<Error Text="Can't have multiple AssetsConfig files!'"/>
    </Target>

	<Target Name="GenerateItems" BeforeTargets="RunBuildingTool">
		<ItemGroup>
			<LocalAssetsDir Include="$(AssetsSourceFullPath)" />
			<LocalMGCBFile Include="$(MGCBAutoGeneratedFilePath)"/>
		</ItemGroup>
    </Target>
	
	<Target Name="RunBuildingTool" Condition="$(IsThereLocalAssets)">
		<Exec 
			Condition="$(IsUsingSourceBuildingTool)"
			WorkingDirectory="$(ReferencingProjectRoot)"
			Command="dotnet &quot;$(BuildingToolBySourcePath)&quot; &quot;@(AssetsConfigFile->'%(Identity)')&quot; &quot;@(LocalAssetsDir->'%(Identity)')&quot; &quot;@(LocalMGCBFile->'%(Identity)')&quot;" />
		<Exec 
			Condition="!$(IsUsingSourceBuildingTool)"
			WorkingDirectory="$(ReferencingProjectRoot)"
			Command="&quot;$(BuildingToolCommand)&quot; &quot;@(AssetsConfigFile->'%(Identity)')&quot; &quot;@(LocalAssetsDir->'%(Identity)')&quot; &quot;@(LocalMGCBFile->'%(Identity)')&quot;" />
		
		
		<ReadLinesFromFile Condition="Exists('$(AssetsCatalogFile)')" File="$(AssetsCatalogFile)">
			<Output TaskParameter="Lines" ItemName="AssetPaths" />
		</ReadLinesFromFile>
		<Message Importance="High" Text="WHAT?"/>
	</Target>

	<Target Name="RunBuildingToolWithPlatform" Condition="'$(MonoGamePlatform)'!=''" BeforeTargets="CollectContentReferences">
		<CallTarget Condition="Exists($(AssetsSourceFullPath))" Targets="RunBuildingTool"/>
    </Target>

	<Target Name="RunBuildingToolNoPlatform" Condition="'$(MonoGamePlatform)'==''" BeforeTargets="Build">
		<CallTarget Condition="Exists($(AssetsSourceFullPath))" Targets="RunBuildingTool"/>
    </Target>

	<Target Name="IncludeAutoGeneratedMGCB" AfterTargets="RunBuildingTool">
		<ItemGroup>
			<MonoGameContentReference Include="@(FinalMGCBFile)"/>
        </ItemGroup>
    </Target>

	<Target Name="CleanAutoGeneratedMGCBRebuild" BeforeTargets="BeforeRebuild">
		<CallTarget Targets="CleanAutoGeneratedMGCB"/>
    </Target>
	<Target Name="CleanAutoGeneratedMGCBClean" BeforeTargets="Clean">
		<CallTarget Targets="CleanAutoGeneratedMGCB"/>
    </Target>

	<Target Name="CleanAutoGeneratedMGCB">
		<Delete Files="$(MGCBAutoGeneratedFilePath)"
				TreatErrorsAsWarnings="True"/>
		<Delete Files="$(AssetsSourceFullPath)bin/**"
				TreatErrorsAsWarnings="True"/>
    </Target>

	<Target Name="CollectOtherProjectsContent" BeforeTargets="CollectContentReferences" Condition="'$(MonoGamePlatform)'!=''">
	  <!-- Create items from ProjectReference paths -->
	  <ItemGroup>
		<!-- Add metadata to project references if not already present -->
		<_ReferencedProjectDir Include="@(ProjectReference)">
		  <ProjectDir>$([System.IO.Path]::GetDirectoryName('%(Identity)'))</ProjectDir>
		</_ReferencedProjectDir>
	  </ItemGroup>

	  <ItemGroup>
		<!-- Use globbing to find .cache.mgcref in each reference -->
		<MonoGameContentReference Include="%( _ReferencedProjectDir.ProjectDir )\**\.mgcref.cache" />
	  </ItemGroup>
	</Target>

	<Target Name="ForceGenerateAssetsInfo" DependsOnTargets="RunBuildingTool">
		<CallTarget Targets="GenerateAssetsInfo"/>
    </Target>

	<Target Name="RoutineGenerateAssetsInfo" Condition="@(AssetsConfigFile->Count()) > 0" BeforeTargets="CoreCompile">
		<CallTarget Targets="GenerateAssetsInfo"/>
    </Target>

	<Target Name="GenerateAssetsInfo" >
		
		<ReadLinesFromFile Condition="Exists('$(AssetsCatalogFile)')" File="$(AssetsCatalogFile)">
			<Output TaskParameter="Lines" ItemName="AssetPaths" />
		</ReadLinesFromFile>

		<PropertyGroup>
			
			<AutoGenAssetsInfoFileName>Fenzwork._AutoGen.AssetsInfo.cs</AutoGenAssetsInfoFileName>
			
			<AssetsInfoWorkingDir Condition="'$(Configuration)'=='Debug' and $(IsThereLocalAssets)">$([MSBuild]::NormalizeDirectory($(AssetsSourceFullPath)).Replace("\", "/"))</AssetsInfoWorkingDir>
			<AssetsInfoWorkingDir Condition="'$(Configuration)'!='Debug' or !$(IsThereLocalAssets)"></AssetsInfoWorkingDir>
			
			<AssetsInfoConfigFileTmp>@(AssetsConfigFile)</AssetsInfoConfigFileTmp>
			<AssetsInfoConfigFile Condition="'$(Configuration)'=='Debug' and $(IsThereLocalAssets)">$([System.String]::Copy($(AssetsInfoConfigFileTmp)).Replace("\", "/"))</AssetsInfoConfigFile>
			<AssetsInfoConfigFile Condition="'$(Configuration)'!='Debug' or !$(IsThereLocalAssets)"></AssetsInfoConfigFile>
			
			<AssetsInfoCatalogContent Condition="Exists('$(AssetsCatalogFile)')">@(AssetPaths->'%(Identity)', ',')</AssetsInfoCatalogContent>

		</PropertyGroup>

		<Message Importance="High" Text="Cataloooog $(AssetsInfoCatalogContent)"/>

		<WriteLinesToFile
		  File="$(IntermediateOutputPath)$(AutoGenAssetsInfoFileName)"
		  Lines=" 
namespace Fenzwork._AutoGen.$(MSBuildProjectName)
{
	static class SetAssetsInfo
	{
#pragma warning disable
		[System.Runtime.CompilerServices.ModuleInitializer]
		public static void Init() { Fenzwork.Services.ConstantsHelper.AddAssets(&quot;$(AssetsInfoConfigFile)&quot;,  &quot;$(AssetsInfoWorkingDir)&quot;, &quot;$(AssetsInfoCatalogContent)&quot;)%3B }
#pragma warning restore
	}
}"
		  Overwrite="true" />
		<ItemGroup>
			<Compile Include="$(IntermediateOutputPath)$(AutoGenAssetsInfoFileName)" AutoGen="true" />
		</ItemGroup>
	</Target>
	
	<Target Name="DeleteAssetsInfoClean"  BeforeTargets="Clean">
		<Delete Files="$(AutoGenAssetsInfoPath)" ContinueOnError="true"/>
    </Target>

	<Target Name="EnsureBuildingToolExists"  Condition=" !Exists('$(BuildingToolDir)$(BuildingToolCommand)') or !Exists('$(BuildingToolDir)$(BuildingToolCommand).exe')" BeforeTargets="Restore">
	    <MakeDir Directories="$(BuildingToolDir)"/>
	    <Exec Command="&quot;$(DotnetCommand)&quot; tool install fwbuild --tool-path ." WorkingDirectory="$(BuildingToolDir)" ContinueOnError="true" />
    </Target>


	<Import Project="Core.targets"/>

</Project>
